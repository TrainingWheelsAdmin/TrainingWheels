//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TrainingWheelsAdminDbEntities : DbContext
    {
        public TrainingWheelsAdminDbEntities()
            : base("name=TrainingWheelsAdminDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdminCredential> AdminCredentials { get; set; }
        public virtual DbSet<AdminDetail> AdminDetails { get; set; }
        public virtual DbSet<AdminScope> AdminScopes { get; set; }
        public virtual DbSet<TenantAddress> TenantAddresses { get; set; }
        public virtual DbSet<TenantDetail> TenantDetails { get; set; }
    
        public virtual int SP_AddCred(Nullable<System.Guid> tenantId, string userName, string password, Nullable<System.Guid> addedBy)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddCred", tenantIdParameter, userNameParameter, passwordParameter, addedByParameter);
        }
    
        public virtual ObjectResult<string> SP_CheckCred(Nullable<System.Guid> tenantId, string userName, string password)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_CheckCred", tenantIdParameter, userNameParameter, passwordParameter);
        }
    }
}
